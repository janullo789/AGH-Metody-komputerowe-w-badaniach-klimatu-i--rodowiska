title: "Geoinforamtyka w Geomorfologii"
author: "mgr inz. Piotr Strzelecki"
date: "semestr zimowy 2022/2023"
# 1. R-ArcGIS ----
# Ustawienie połączenia Arcgis - R
install.packages("arcgisbinding")
library(arcgisbinding)
arc.check_product()
library(arcgisbinding)
arc.check_product()
path <- "C:/Users/Dell/Documents/Studia/Semestr 5/Geoinformatyka w geomorfologii/Cw5_2022_11_30/Rarc.gdb/" # wpisz własną ścieżkę !!!
data.path <- arc.open(paste(path,"Rarc.gdb", sep = "")) # połączenie z ArcGIS
data.path # zawartość gdb
data.path <- arc.open(paste(path,"Rarc.gdb/admin", sep = "")) # wybierzmy shp admin
data.df <- arc.select(data.path) # standardowy data frame (tabela atrybutów)
class(data.df)
data.path <- arc.open(paste(path,"Rarc.gdb", sep = "")) # połączenie z ArcGIS
data.path <- arc.open(paste(path,"Rarc.gdb", sep = "")) # połączenie z ArcGIS
path <- "C:/Users/Dell/Documents/Studia/Semestr 5/Geoinformatyka w geomorfologii/Cw5_2022_11_30/" # wpisz własną ścieżkę !!!
data.path <- arc.open(paste(path,"Rarc.gdb", sep = "")) # połączenie z ArcGIS
data.path # zawartość gdb
data.path <- arc.open(paste(path,"Rarc.gdb/admin", sep = "")) # wybierzmy shp admin
data.df <- arc.select(data.path) # standardowy data frame (tabela atrybutów)
class(data.df)
data.sp <- arc.data2sp(data.df)
plot(data.sp)
library(sp)
plot(data.sp)
library(dplyr)
pol.sp <- data.sp %>% subset(ADMIN == "Poland")
plot(pol.sp)
install.packages("leaflet")
library(leaflet)
leaflet(pol.sp) %>% addPolygons() %>% addTiles()
arc.write(paste(path,"Rarc.gdb/pol", sep = ""), pol.sp, overwrite = T)
arc.write('path/pol_data', pol.sp) #- tworzy new feature class w example.gdb file geodatabase
arc.write('path/example.gdb/pol_data', pol.sp) #- tworzy new feature class w example.gdb file geodatabase
raster.path <- arc.open(paste(path,"Rarc.gdb/dem", sep = ""))
arc.dem <- arc.raster(raster.path) # konwersja danych do typu arc.raster
class(arc.dem)
library(raster)
dem.pl <- as.raster(arc.dem) # obiekt raster
class(dem.pl)
crs(dem.pl)
crs(dem.pl)
crs(dem.pl) + proj=longlat +datum=WGS84 +no_defs
crs(dem.pl) +proj=longlat +datum=WGS84 +no_defs
crs(dem.pl) <- "+proj=longlat +datum=WGS84 +no_defs"
plot(dem.pl)
leaflet() %>% addTiles() %>% addRasterImage(dem.pl)
slope <- terrain(dem.pl, opt='slope')
aspect <- terrain(dem.pl, opt='aspect')
hill <- hillShade(slope, aspect, 40, 270)
plot(hill)
plot(hill, col=grey(0:100/100))
crs(hill)
leaflet() %>% addTiles() %>% addRasterImage(hill)
arc.write(paste(path,"Rarc.gdb/hill", sep = ""),hill, overwrite = T)
setwd("~/Studia/Semestr 5/Metody komputerowe/Projekt2")
library(httr)
library(jsonlite)
library(utils)
library(sp)
library(sf)
library(spatstat)
library(maptools)
library(automap)
library(rgdal)
library(raster)
library(rgeos)
library(gstat)
library(tmaptools)
#wczytanie klucza API z pliku
kluczAPI <- readLines("keyAPI.txt")
#pobranie danych o czujnikach w odległości 15km od ratusza
r <- GET("https://airapi.airly.eu/v2/installations/nearest?lat=50.0617022&lng=19.9373569&maxDistanceKM=15&maxResults=-1",
add_headers(apikey = kluczAPI, Accept = "application/json")
)
#przejście do listy
jsonRespText<-content(r,as="text")
test15<-fromJSON(jsonRespText)
#View(test15)
#tworzymy ramkę data15 - z danymi o lokalizacji, wysokości i id czjników
longitude<-test15$location$longitude
latitude<-test15$location$latitude
data15<-data.frame(longitude,latitude)
data15$elevation<-test15$elev #wysokość nie bedzie potrzebna, ale niech będzie dla przykładu
data15$id<-test15$id
head(data15)
#tworzymy obiekt przestrzenny
data_spat<-data.frame(lon=data15$longitude,lat=data15$latitude,elev=data15$elev,id=data15$id)
coordinates(data_spat) <- ~lon+lat #określamy, które elementy to koordynaty (potrzebne do ppp)
proj4string(data_spat) <- CRS("+proj=longlat +datum=WGS84") #określamy, jaki mamy układ
data_spat # mamy już obiekt w układzie sferycznym, który można automatycznie
#konwersja do UTM (bo tworzymy ppp, a to jego układ)
data_UTM <- spTransform(data_spat, CRS("+proj=utm +zone=34 +datum=WGS84"))
dzielnice<-st_read("dzielnice_Krakowa/dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
# konwertujemy do WGS84
dzielniceWGS84<-st_transform(dzielnice,crs = 4326) # "4326" to kod dla WGS84
# zostawiamy tylko kontur miasta
krakowWGS84<-st_union(dzielniceWGS84)
#przekształcamy na UTM
krakowUTM<-st_transform(krakowWGS84,CRS("+proj=utm +zone=34 +datum=WGS84"))
data15_ppp_id<-ppp(x=data_UTM$lon,y=data_UTM$lat,marks=data.frame(elev=data_UTM$elev,id=data_UTM$id),window=as.owin(krakowUTM))
data15_ppp_id$marks$id #mamy od razu tylko te id które są w Krakowie!
data15_ppp<-ppp(x=data_UTM$lon,y=data_UTM$lat,window=as.owin(krakowUTM))
plot(data15_ppp)
data15_ppp_e<-ppp(x=data_UTM$lon,y=data_UTM$lat,marks=data_UTM$elev,window=as.owin(krakowUTM))
plot(data15_ppp_e)
#najpierw musimy utworzyć:
##1) dwa obiekty zawierające:
###liczbę czujników
n_id<-length(data15_ppp_id$marks$id)
n_id
###id czujników
id<-data15_ppp_id$marks$id
id
##2) pustą listę do odczytów z czujników (installations) AIRLY
list_instDzien1Rano <- vector(mode = "list", length = n_id) #18.12.2022 9:02 7km/h zach
list_instDzien1Poludnie <- vector(mode = "list", length = n_id) #18.12.2022 17:04 7km/h wsch
list_instDzien1Wieczor <- vector(mode = "list", length = n_id) #18.12.2022 20.08 13 km/h 	płn. wsch
list_instDzien2Rano <- vector(mode = "list", length = n_id) # 19.12.2022 8:20 5km/h wsch
list_instDzien2Poludnie <- vector(mode = "list", length = n_id) #19.12.2022 16:40  6km/h płn, wsch.
list_instDzien2Wieczor <- vector(mode = "list", length = n_id) #19.12.2022 20:45 4 km/g płn. wsch
list_instDzien3Rano <- vector(mode = "list", length = n_id) #20.12.2022 9:20 7km/h pd. zach
list_instDzien3Poludnie <- vector(mode = "list", length = n_id) #20.12.2022 16:20 2km/h zach
list_instDzien3Wieczor <- vector(mode = "list", length = n_id) #20.12.2022 20:45 9 km/h zach
load(file="saves/list_instDzien3Poludnie.Rdata")
list_inst2<-list_instDzien3Poludnie #tutaj tez zmieniamy zmienną
current<-rep(NA,n_id)
##pętla do "wyciągnięcia" wartości "current"
for (i in seq(1,n_id)) {
print(i)
logic<-list_inst2[[i]]$current$values$name=="PM25" #zmienna logiczna do wyszukania pól o nazwie "PM25"
if (sum(logic)==1) #testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
current[i]<-list_inst2[[i]]$current$values[logic,2]
}
current
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
coordinates(data15_spdf)
# dodajemy kolumnę current
data15_spdf$current<-current
dev.off() #bo może wariować RStudio
plot(data15_spdf)
miss <- is.na(data15_spdf$current)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
plot(pm25_auto)
#zmieńmy model i porównajmy wyniki, popatrzmy na wariogram
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],
model="Gau")
show.vgms()
show.vgms(models=c('Nug', 'Sph', 'Gau', 'Pow', 'Exp'), range=1.4,
max=2.5)
##ładna mapa
#Musimy mied kontur Krakowa w odpowiednim formacie:
bound<-st_as_sf(krakowUTM)
plot(bound)
#Pobieramy współrzędne punktów konturu w formie macierzy:
coord<-as.data.frame(st_coordinates(krakowUTM))
#Najpierw utworzymy siatkę - prostokąt okalający kontur Krakowa:
#1. Określamy współrzędne naroży
left_down<-c( min(coord$X), min(coord$Y))
right_up<-c( max(coord$X), max(coord$Y))
#2. Ustalamy rozmiar oczka siatki (100x100 metrów)
size<-c(100,100)
#3. Obliczamy liczbę oczek siatki przypadjących na długośd i szerokośd prostokąta:
points<- (right_up-left_down)/size
num_points<-ceiling(points) #zaokrąglenie w górę
#4. Wreszcie tworzymy siatkę…
grid <- GridTopology(left_down, size,num_points)
#5. …i konwertujemy ją do odpowiedniego formatu, w odpowiednim układzie (tu: WGS84)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34
+datum=WGS84"))
plot(gridpoints) #czekamy cierpliwie
#Teraz przycinamy utworzoną siatkę konturem Krakowa funkcją crop_shape z pakietu tmaptools
g<-st_as_sf(gridpoints)#konwersja do formatu na którym działa crop_shape
cg<-crop_shape(g,bound,polygon = TRUE)
spgrid <- SpatialPixels(as_Spatial(cg)) #konwersja z powrotem do st i
#następnie do SpatialPixels
plot(spgrid)
#Rysujemy mape z wykorzystaniem krigingu:
##uwaga: ”current” zamiast ”marks”!
elev_auto <- autoKrige(current ~ 1, input_data =
data15_spdf[!miss,],new_data=spgrid)
plot(elev_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(elev_auto)
for (i in seq(1,n_id)) {
print(i)
logic<-list_inst2[[i]]$current$values$name=="TEMPERATURE" #zmienna logiczna do wyszukania pól o nazwie "PM25"
if (sum(logic)==1) #testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
current[i]<-list_inst2[[i]]$current$values[logic,2]
}
current
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
coordinates(data15_spdf)
# dodajemy kolumnę current
data15_spdf$current<-current
dev.off() #bo może wariować RStudio
plot(data15_spdf)
miss <- is.na(data15_spdf$current)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="TEMP")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
plot(pm25_auto)
#zmieńmy model i porównajmy wyniki, popatrzmy na wariogram
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="TEMP")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],
model="Gau")
show.vgms()
show.vgms(models=c('Nug', 'Sph', 'Gau', 'Pow', 'Exp'), range=1.4,
max=2.5)
##ładna mapa
#Musimy mied kontur Krakowa w odpowiednim formacie:
bound<-st_as_sf(krakowUTM)
plot(bound)
#Pobieramy współrzędne punktów konturu w formie macierzy:
coord<-as.data.frame(st_coordinates(krakowUTM))
#Najpierw utworzymy siatkę - prostokąt okalający kontur Krakowa:
#1. Określamy współrzędne naroży
left_down<-c( min(coord$X), min(coord$Y))
right_up<-c( max(coord$X), max(coord$Y))
#2. Ustalamy rozmiar oczka siatki (100x100 metrów)
size<-c(100,100)
#3. Obliczamy liczbę oczek siatki przypadjących na długośd i szerokośd prostokąta:
points<- (right_up-left_down)/size
num_points<-ceiling(points) #zaokrąglenie w górę
#4. Wreszcie tworzymy siatkę…
grid <- GridTopology(left_down, size,num_points)
#5. …i konwertujemy ją do odpowiedniego formatu, w odpowiednim układzie (tu: WGS84)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34
+datum=WGS84"))
plot(gridpoints) #czekamy cierpliwie
#Teraz przycinamy utworzoną siatkę konturem Krakowa funkcją crop_shape z pakietu tmaptools
g<-st_as_sf(gridpoints)#konwersja do formatu na którym działa crop_shape
cg<-crop_shape(g,bound,polygon = TRUE)
spgrid <- SpatialPixels(as_Spatial(cg)) #konwersja z powrotem do st i
#następnie do SpatialPixels
plot(spgrid)
#Rysujemy mape z wykorzystaniem krigingu:
##uwaga: ”current” zamiast ”marks”!
elev_auto <- autoKrige(current ~ 1, input_data =
data15_spdf[!miss,],new_data=spgrid)
plot(elev_auto$krige_output[1],main="TEMP")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(elev_auto)
##awaryjne api
#dhDFuJimjc0l6eOg9r1XFPVcYimG8Ynx
#a7R8xdsR7QhnnDc3nojkndhw3EWAEKaw
#Nvw5QZwC9WlItbR7qYOJW2PMwLHVrfdF
