list_instDzien3Poludnie <- vector(mode = "list", length = n_id)
list_instDzien3Wieczor <- vector(mode = "list", length = n_id)
for (i in seq(1,n_id)) {
print(i) #to tylko pomocniczo, żeby wiedzieć, który obrót pętli
#tworzymy ciąg znaków określajacy adres, pod kótrym znajdują się pomiary z czujnika
str<-paste("https://airapi.airly.eu/v2/measurements/installation?installationId=",id[i],sep="")
#pobieramy dane z adresu
r <- GET(url=str,add_headers(apikey = kluczAPI, Accept = "application/json"))
#przechodzimy z formatu r na json i z json na tekst
jsonRespText<-content(r,as="text")
inst<-fromJSON(jsonRespText)
list_instDzien1Rano[[i]]<-inst #tutaj zmieniamy zmienną do zapisu
}
#koniec pętli
#zapis pełnej listy do pliku (na wszelki wypadek, bo mamy tylko 100 zapytań dziennie do AIRLY
save(list_instDzien1Rano,file="saves/list_instDzien1Rano.Rdata") #tutaj tez zmieniamy zmienną do zapisu
#load(file="saves/list_instDzien1Rano.Rdata")
list_inst2<-list_instDzien1Rano #tutaj tez zmieniamy zmienną
#teraz wybieramy potrzebne dane
##tworzymy pusty wektor dla danych "current"
current<-rep(NA,n_id)
##pętla do "wyciągnięcia" wartości "current"
for (i in seq(1,n_id)) {
print(i)
logic<-list_inst2[[i]]$current$values$name=="PM25" #zmienna logiczna do wyszukania pól o nazwie "PM25"
if (sum(logic)==1) #testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
current[i]<-list_inst2[[i]]$current$values[logic,2]
}
current
library(maptools)
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
coordinates(data15_spdf)
# dodajemy kolumnę current
data15_spdf$current<-current
dev.off() #bo może wariować RStudio
plot(data15_spdf)
library(automap)
miss <- is.na(data15_spdf$current)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
plot(pm25_auto)
#zmieńmy model i porównajmy wyniki, popatrzmy na wariogram
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp),add=TRUE)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
data15_ppp_e<-ppp(x=data_UTM$lon,y=data_UTM$lat,marks=data_UTM$elev,window=as.owin(krakowUTM))
plot(data15_ppp_e)
library(rgdal)
data15_ppp_e<-ppp(x=data_UTM$lon,y=data_UTM$lat,marks=data_UTM$elev,window=as.owin(krakowUTM))
plot(data15_ppp_e)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(pm25_auto)
qt <- quadrat.test(data15_ppp)
plot(qt)
qt <- quadrat.test(data15_ppp)
data15_ppp<-ppp(x=data_UTM$lon,y=data_UTM$lat,window=as.owin(krakowUTM))
plot(data15_ppp)
plot(data15_ppp_e)
plot(data15_ppp)
qt <- quadrat.test(data15_ppp)
plot(qt)
qt <- quadrat.test(data15_ppp)
data_spat<-data.frame(lon=data15$longitude,lat=data15$l,elev=data15$elevation)
qt <- quadrat.test(data15_ppp)
plot(qt)
library(raster)
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_e)
spplot(data15_spdf)
coordinates(data15_spdf)
elev_auto <- autoKrige(marks ~ 1, input_data = data15_spdf)
plot(elev_auto)
plot(elev_auto$krige_output[1])
points(data15_ppp_e,pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
bound<-st_as_sf(krakowUTM)
plot(bound)
coord<-as.data.frame(st_coordinates(krakowUTM))
summary(coord)
left_down<-c( min(coord$X), min(coord$Y)) #lewy dolny róg
right_up<-c( max(coord$X), max(coord$Y))
size<-c(100,100)
points<- (right_up-left_down)/size
num_points<-ceiling(points)
num_points
eps<-10
grid <- GridTopology(left_down, size, num_points)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34N+datum=WGS84"))
plot(gridpoints)
library(rgeos)
cropped_gridpoints <- crop(gridpoints,bound)
plot(cropped_gridpoints,add=TRUE,col="Red")
plot(bound, add=TRUE)
spgrid <- SpatialPixels(cropped_gridpoints)
plot(spgrid)
plot(Window(data15_ppp_e),add=TRUE)
elev_auto <- autoKrige(marks ~ 1, input_data = data15_spdf,new_data=spgrid, model = "Mat")
elev_auto <- autoKrige(marks ~ 1, input_data = data15_spdf, new_data=spgrid, model = "Mat")
elev_auto <- autoKrige(marks ~ 1, input_data = data15_spdf,
new_data=spgrid, model = "Mat")
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
coordinates(data15_spdf)
# dodajemy kolumnę current
data15_spdf$current<-current
dev.off() #bo może wariować RStudio
plot(data15_spdf)
miss <- is.na(data15_spdf$current)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],
model="Gau")
plot(pm25_auto)
library(gstat)
show.vgms()
show.vgms(models=c('Nug', 'Sph', 'Gau', 'Pow', 'Exp'), range=1.4,
max=2.5)
bound<-st_as_sf(krakowUTM)
plot(bound)
#Pobieramy współrzędne punktów konturu w formie macierzy:
coord<-as.data.frame(st_coordinates(krakowUTM))
library(tmaptools)
left_down<-c( min(coord$X), min(coord$Y))
right_up<-c( max(coord$X), max(coord$Y))
size<-c(100,100)
points<- (right_up-left_down)/size
num_points<-ceiling(points) #zaokrąglenie w górę
grid <- GridTopology(left_down, size,num_points)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34
+datum=WGS84"))
plot(gridpoints) #czekamy cierpliwie
g<-st_as_sf(gridpoints)#konwersja do formatu na którym działa crop_shape
cg<-crop_shape(g,bound,polygon = TRUE)
spgrid <- SpatialPixels(as_Spatial(cg)) #konwersja z powrotem do st i
plot(spgrid)
#Rysujemy mape z wykorzystaniem krigingu:
##uwaga: ”current” zamiast ”marks”!
elev_auto <- autoKrige(current ~ 1, input_data =
data15_spdf[!miss,],new_data=spgrid)
plot(elev_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(elev_auto)
library(httr)
library(jsonlite)
library(utils)
library(sp)
library(sf)
library(spatstat)
library(maptools)
library(automap)
library(rgdal)
library(raster)
library(rgeos)
library(gstat)
library(tmaptools)
#wczytanie klucza API z pliku
kluczAPI <- readLines("keyAPI.txt")
#pobranie danych o czujnikach w odległości 15km od ratusza
r <- GET("https://airapi.airly.eu/v2/installations/nearest?lat=50.0617022&lng=19.9373569&maxDistanceKM=15&maxResults=-1",
add_headers(apikey = kluczAPI, Accept = "application/json")
)
#przejście do listy
jsonRespText<-content(r,as="text")
test15<-fromJSON(jsonRespText)
#View(test15)
#tworzymy ramkę data15 - z danymi o lokalizacji, wysokości i id czjników
longitude<-test15$location$longitude
latitude<-test15$location$latitude
data15<-data.frame(longitude,latitude)
data15$elevation<-test15$elev #wysokość nie bedzie potrzebna, ale niech będzie dla przykładu
data15$id<-test15$id
head(data15)
#tworzymy obiekt przestrzenny
data_spat<-data.frame(lon=data15$longitude,lat=data15$latitude,elev=data15$elev,id=data15$id)
coordinates(data_spat) <- ~lon+lat #określamy, które elementy to koordynaty (potrzebne do ppp)
proj4string(data_spat) <- CRS("+proj=longlat +datum=WGS84") #określamy, jaki mamy układ
data_spat # mamy już obiekt w układzie sferycznym, który można automatycznie
#konwersja do UTM (bo tworzymy ppp, a to jego układ)
data_UTM <- spTransform(data_spat, CRS("+proj=utm +zone=34 +datum=WGS84"))
dzielnice<-st_read("dzielnice_Krakowa/dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
# konwertujemy do WGS84
dzielniceWGS84<-st_transform(dzielnice,crs = 4326) # "4326" to kod dla WGS84
# zostawiamy tylko kontur miasta
krakowWGS84<-st_union(dzielniceWGS84)
#przekształcamy na UTM
krakowUTM<-st_transform(krakowWGS84,CRS("+proj=utm +zone=34 +datum=WGS84"))
data15_ppp_id<-ppp(x=data_UTM$lon,y=data_UTM$lat,marks=data.frame(elev=data_UTM$elev,id=data_UTM$id),window=as.owin(krakowUTM))
data15_ppp_id$marks$id #mamy od razu tylko te id które są w Krakowie!
data15_ppp<-ppp(x=data_UTM$lon,y=data_UTM$lat,window=as.owin(krakowUTM))
plot(data15_ppp)
data15_ppp_e<-ppp(x=data_UTM$lon,y=data_UTM$lat,marks=data_UTM$elev,window=as.owin(krakowUTM))
plot(data15_ppp_e)
n_id<-length(data15_ppp_id$marks$id)
n_id
###id czujników
id<-data15_ppp_id$marks$id
id
##2) pustą listę do odczytów z czujników (installations) AIRLY
list_instDzien1Rano <- vector(mode = "list", length = n_id) #funkcja do stworzenia struktury danych
list_instDzien1Poludnie <- vector(mode = "list", length = n_id)
list_instDzien1Wieczor <- vector(mode = "list", length = n_id)
list_instDzien2Rano <- vector(mode = "list", length = n_id)
list_instDzien2Poludnie <- vector(mode = "list", length = n_id)
list_instDzien2Wieczor <- vector(mode = "list", length = n_id)
list_instDzien3Rano <- vector(mode = "list", length = n_id)
list_instDzien3Poludnie <- vector(mode = "list", length = n_id)
list_instDzien3Wieczor <- vector(mode = "list", length = n_id)
load(file="saves/list_instDzien1Rano.Rdata")
list_inst2<-list_instDzien1Rano #tutaj tez zmieniamy zmienną
#teraz wybieramy potrzebne dane
##tworzymy pusty wektor dla danych "current"
current<-rep(NA,n_id)
for (i in seq(1,n_id)) {
print(i)
logic<-list_inst2[[i]]$current$values$name=="PM25" #zmienna logiczna do wyszukania pól o nazwie "PM25"
if (sum(logic)==1) #testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
current[i]<-list_inst2[[i]]$current$values[logic,2]
}
current
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
coordinates(data15_spdf)
# dodajemy kolumnę current
data15_spdf$current<-current
dev.off() #bo może wariować RStudio
plot(data15_spdf)
miss <- is.na(data15_spdf$current)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],
model="Gau")
show.vgms()
show.vgms(models=c('Nug', 'Sph', 'Gau', 'Pow', 'Exp'), range=1.4,
max=2.5)
bound<-st_as_sf(krakowUTM)
plot(bound)
#Pobieramy współrzędne punktów konturu w formie macierzy:
coord<-as.data.frame(st_coordinates(krakowUTM))
#Najpierw utworzymy siatkę - prostokąt okalający kontur Krakowa:
#1. Określamy współrzędne naroży
left_down<-c( min(coord$X), min(coord$Y))
right_up<-c( max(coord$X), max(coord$Y))
#2. Ustalamy rozmiar oczka siatki (100x100 metrów)
size<-c(100,100)
#3. Obliczamy liczbę oczek siatki przypadjących na długośd i szerokośd prostokąta:
points<- (right_up-left_down)/size
num_points<-ceiling(points) #zaokrąglenie w górę
#4. Wreszcie tworzymy siatkę…
grid <- GridTopology(left_down, size,num_points)
#5. …i konwertujemy ją do odpowiedniego formatu, w odpowiednim układzie (tu: WGS84)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34
+datum=WGS84"))
plot(gridpoints) #czekamy cierpliwie
#Teraz przycinamy utworzoną siatkę konturem Krakowa funkcją crop_shape z pakietu tmaptools
g<-st_as_sf(gridpoints)#konwersja do formatu na którym działa crop_shape
cg<-crop_shape(g,bound,polygon = TRUE)
spgrid <- SpatialPixels(as_Spatial(cg)) #konwersja z powrotem do st i
#następnie do SpatialPixels
plot(spgrid)
#Rysujemy mape z wykorzystaniem krigingu:
##uwaga: ”current” zamiast ”marks”!
elev_auto <- autoKrige(current ~ 1, input_data =
data15_spdf[!miss,],new_data=spgrid)
plot(elev_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(elev_auto)
plot(elev_auto)
library(httr)
library(jsonlite)
library(utils)
library(sp)
library(sf)
library(spatstat)
library(maptools)
library(automap)
library(rgdal)
library(raster)
library(rgeos)
library(gstat)
library(tmaptools)
plot(elev_auto)
kluczAPI <- readLines("keyAPI.txt")
#pobranie danych o czujnikach w odległości 15km od ratusza
r <- GET("https://airapi.airly.eu/v2/installations/nearest?lat=50.0617022&lng=19.9373569&maxDistanceKM=15&maxResults=-1",
add_headers(apikey = kluczAPI, Accept = "application/json")
)
#przejście do listy
jsonRespText<-content(r,as="text")
test15<-fromJSON(jsonRespText)
#View(test15)
#tworzymy ramkę data15 - z danymi o lokalizacji, wysokości i id czjników
longitude<-test15$location$longitude
latitude<-test15$location$latitude
data15<-data.frame(longitude,latitude)
data15$elevation<-test15$elev #wysokość nie bedzie potrzebna, ale niech będzie dla przykładu
data15$id<-test15$id
head(data15)
#tworzymy obiekt przestrzenny
data_spat<-data.frame(lon=data15$longitude,lat=data15$latitude,elev=data15$elev,id=data15$id)
coordinates(data_spat) <- ~lon+lat #określamy, które elementy to koordynaty (potrzebne do ppp)
proj4string(data_spat) <- CRS("+proj=longlat +datum=WGS84") #określamy, jaki mamy układ
data_spat # mamy już obiekt w układzie sferycznym, który można automatycznie
#konwersja do UTM (bo tworzymy ppp, a to jego układ)
data_UTM <- spTransform(data_spat, CRS("+proj=utm +zone=34 +datum=WGS84"))
dzielnice<-st_read("dzielnice_Krakowa/dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
# konwertujemy do WGS84
dzielniceWGS84<-st_transform(dzielnice,crs = 4326) # "4326" to kod dla WGS84
# zostawiamy tylko kontur miasta
krakowWGS84<-st_union(dzielniceWGS84)
#przekształcamy na UTM
krakowUTM<-st_transform(krakowWGS84,CRS("+proj=utm +zone=34 +datum=WGS84"))
data15_ppp_id<-ppp(x=data_UTM$lon,y=data_UTM$lat,marks=data.frame(elev=data_UTM$elev,id=data_UTM$id),window=as.owin(krakowUTM))
data15_ppp_id$marks$id #mamy od razu tylko te id które są w Krakowie!
data15_ppp<-ppp(x=data_UTM$lon,y=data_UTM$lat,window=as.owin(krakowUTM))
plot(data15_ppp)
data15_ppp_e<-ppp(x=data_UTM$lon,y=data_UTM$lat,marks=data_UTM$elev,window=as.owin(krakowUTM))
plot(data15_ppp_e)
#najpierw musimy utworzyć:
##1) dwa obiekty zawierające:
###liczbę czujników
n_id<-length(data15_ppp_id$marks$id)
n_id
###id czujników
id<-data15_ppp_id$marks$id
id
##2) pustą listę do odczytów z czujników (installations) AIRLY
list_instDzien1Rano <- vector(mode = "list", length = n_id) #funkcja do stworzenia struktury danych
list_instDzien1Poludnie <- vector(mode = "list", length = n_id)
list_instDzien1Wieczor <- vector(mode = "list", length = n_id)
list_instDzien2Rano <- vector(mode = "list", length = n_id)
list_instDzien2Poludnie <- vector(mode = "list", length = n_id)
list_instDzien2Wieczor <- vector(mode = "list", length = n_id)
list_instDzien3Rano <- vector(mode = "list", length = n_id)
list_instDzien3Poludnie <- vector(mode = "list", length = n_id)
list_instDzien3Wieczor <- vector(mode = "list", length = n_id)
load(file="saves/list_instDzien1Rano.Rdata")
list_inst2<-list_instDzien1Rano #tutaj tez zmieniamy zmienną
#teraz wybieramy potrzebne dane
##tworzymy pusty wektor dla danych "current"
current<-rep(NA,n_id)
##pętla do "wyciągnięcia" wartości "current"
for (i in seq(1,n_id)) {
print(i)
logic<-list_inst2[[i]]$current$values$name=="PM25" #zmienna logiczna do wyszukania pól o nazwie "PM25"
if (sum(logic)==1) #testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
current[i]<-list_inst2[[i]]$current$values[logic,2]
}
current
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
coordinates(data15_spdf)
# dodajemy kolumnę current
data15_spdf$current<-current
dev.off() #bo może wariować RStudio
plot(data15_spdf)
miss <- is.na(data15_spdf$current)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],
model="Gau")
show.vgms()
show.vgms(models=c('Nug', 'Sph', 'Gau', 'Pow', 'Exp'), range=1.4,
max=2.5)
bound<-st_as_sf(krakowUTM)
plot(bound)
#Pobieramy współrzędne punktów konturu w formie macierzy:
coord<-as.data.frame(st_coordinates(krakowUTM))
#Najpierw utworzymy siatkę - prostokąt okalający kontur Krakowa:
#1. Określamy współrzędne naroży
left_down<-c( min(coord$X), min(coord$Y))
right_up<-c( max(coord$X), max(coord$Y))
#2. Ustalamy rozmiar oczka siatki (100x100 metrów)
size<-c(100,100)
#3. Obliczamy liczbę oczek siatki przypadjących na długośd i szerokośd prostokąta:
points<- (right_up-left_down)/size
num_points<-ceiling(points) #zaokrąglenie w górę
#4. Wreszcie tworzymy siatkę…
grid <- GridTopology(left_down, size,num_points)
#5. …i konwertujemy ją do odpowiedniego formatu, w odpowiednim układzie (tu: WGS84)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34
+datum=WGS84"))
plot(gridpoints) #czekamy cierpliwie
#Teraz przycinamy utworzoną siatkę konturem Krakowa funkcją crop_shape z pakietu tmaptools
g<-st_as_sf(gridpoints)#konwersja do formatu na którym działa crop_shape
cg<-crop_shape(g,bound,polygon = TRUE)
spgrid <- SpatialPixels(as_Spatial(cg)) #konwersja z powrotem do st i
#następnie do SpatialPixels
plot(spgrid)
#Rysujemy mape z wykorzystaniem krigingu:
##uwaga: ”current” zamiast ”marks”!
elev_auto <- autoKrige(current ~ 1, input_data =
data15_spdf[!miss,],new_data=spgrid)
plot(elev_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(elev_auto)
View(list_inst2)
View(list_inst2)
View(list_instDzien1Rano)
View(list_inst2)
for (i in seq(1,n_id)) {
print(i)
logic<-list_inst2[[i]]$current$values$name=="TEMPERATURE" #zmienna logiczna do wyszukania pól o nazwie "PM25"
if (sum(logic)==1) #testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
current[i]<-list_inst2[[i]]$current$values[logic,6]
}
for (i in seq(1,n_id)) {
print(i)
logic<-list_inst2[[i]]$current$values$name=="TEMPERATURE" #zmienna logiczna do wyszukania pól o nazwie "PM25"
if (sum(logic)==1) #testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
current[i]<-list_inst2[[i]]$current$values[logic,2]
}
current
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
coordinates(data15_spdf)
# dodajemy kolumnę current
data15_spdf$current<-current
dev.off() #bo może wariować RStudio
plot(data15_spdf)
miss <- is.na(data15_spdf$current)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
plot(pm25_auto)
#zmieńmy model i porównajmy wyniki, popatrzmy na wariogram
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],
model="Gau")
show.vgms()
show.vgms(models=c('Nug', 'Sph', 'Gau', 'Pow', 'Exp'), range=1.4,
max=2.5)
##ładna mapa
#Musimy mied kontur Krakowa w odpowiednim formacie:
bound<-st_as_sf(krakowUTM)
plot(bound)
#Pobieramy współrzędne punktów konturu w formie macierzy:
coord<-as.data.frame(st_coordinates(krakowUTM))
#Najpierw utworzymy siatkę - prostokąt okalający kontur Krakowa:
#1. Określamy współrzędne naroży
left_down<-c( min(coord$X), min(coord$Y))
right_up<-c( max(coord$X), max(coord$Y))
#2. Ustalamy rozmiar oczka siatki (100x100 metrów)
size<-c(100,100)
#3. Obliczamy liczbę oczek siatki przypadjących na długośd i szerokośd prostokąta:
points<- (right_up-left_down)/size
num_points<-ceiling(points) #zaokrąglenie w górę
#4. Wreszcie tworzymy siatkę…
grid <- GridTopology(left_down, size,num_points)
#5. …i konwertujemy ją do odpowiedniego formatu, w odpowiednim układzie (tu: WGS84)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34
+datum=WGS84"))
plot(gridpoints) #czekamy cierpliwie
#Teraz przycinamy utworzoną siatkę konturem Krakowa funkcją crop_shape z pakietu tmaptools
g<-st_as_sf(gridpoints)#konwersja do formatu na którym działa crop_shape
cg<-crop_shape(g,bound,polygon = TRUE)
spgrid <- SpatialPixels(as_Spatial(cg)) #konwersja z powrotem do st i
#następnie do SpatialPixels
plot(spgrid)
#Rysujemy mape z wykorzystaniem krigingu:
##uwaga: ”current” zamiast ”marks”!
elev_auto <- autoKrige(current ~ 1, input_data =
data15_spdf[!miss,],new_data=spgrid)
plot(elev_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(elev_auto)
